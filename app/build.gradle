apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-kapt"

android {
    compileSdkVersion 25
    buildToolsVersion "$build_tools_version"

    defaultConfig {
        applicationId 'com.proxerme.app'
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 26
        versionName "0.7.2"

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets("RELEASE_STORE_FILE"))
                storePassword getFromSecrets("RELEASE_STORE_PASSWORD")
                keyAlias getFromSecrets("RELEASE_KEY_ALIAS")
                keyPassword getFromSecrets("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "PROXER_API_KEY", "\"" +
                    getFromSecrets("PROXER_API_KEY") + "\""
        }

        debug {
            minifyEnabled true
            useProguard false
            proguardFiles 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources false
            zipAlignEnabled true
            proguardFiles 'proguard-rules.pro'

            if (shouldSign()) {
                signingConfig signingConfigs.release
            } else {
                logger.warn('This build will not be signed because it is missing the keystore' +
                        ' info. Please add values for "RELEASE_STORE_FILE", ' +
                        '"RELEASE_STORE_PASSWORD", "RELEASE_KEY_ALIAS" and ' +
                        '"RELEASE_KEY_PASSWORD" to your secrets.properties file if you want the ' +
                        'apk to be signed.')
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile "com.android.support:support-v4:$support_version"
    compile "com.android.support:support-v13:$support_version"
    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:design:$support_version"
    compile "com.android.support:customtabs:$support_version"
    compile "com.android.support:support-annotations:$support_version"
    compile "com.android.support:preference-v7:$support_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.anko:anko-common:$anko_version"
    compile "org.jetbrains.anko:anko-sqlite:$anko_version"

    compile 'net.xpece.android:support-preference:1.2.1'

    compile('com.mikepenz:aboutlibraries:5.9.1@aar') {
        transitive = true
    }
    compile('com.mikepenz:materialdrawer:5.8.1@aar') {
        transitive = true
    }
    compile 'com.mikepenz:iconics-core:2.8.2@aar'
    compile 'com.mikepenz:community-material-typeface:1.7.22.1@aar'

    compile 'net.danlew:android.joda:2.9.5.1'

    compile 'com.orhanobut:hawk:2.0.1'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'

    compile 'org.greenrobot:eventbus:3.0.0'
    kapt 'org.greenrobot:eventbus-annotation-processor:3.0.1'

    compile 'de.hdodenhof:circleimageview:2.1.0'

    compile 'com.h6ah4i.android.tablayouthelper:tablayouthelper:0.7.0'

    compile 'com.afollestad.material-dialogs:core:0.9.2.1'

    compile 'org.apmem.tools:layouts:1.10@aar'

    compile 'com.klinkerapps:link_builder:1.3.3'

    compile 'com.github.nekocode:Badge:1.6.2'

    compile 'com.vanniktech:emoji:0.4.0-SNAPSHOT'

    compile 'com.devbrackets.android:exomedia:3.0.1'

    compile 'com.github.chrisbanes:PhotoView:1.3.1'

    compile 'me.zhanghai.android.materialratingbar:library:1.0.2'
    compile 'me.zhanghai.android.customtabshelper:library:1.0.3'

    compile 'com.github.proxer:ProxerLibAndroid:900d693f2c'
    compile 'com.github.rubengees:EasyHeaderFooterAdapter:1.0.4@aar'
    compile('com.github.rubengees:introduction:1.3.7@aar') {
        transitive = true
    }

    debugCompile "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
}

kapt {
    arguments {
        arg('eventBusIndex', 'com.proxerme.app.EventBusIndex')
    }
}

static def getFromSecrets(String key) {
    def Properties result = new Properties()
    def isCI = System.getenv('CI')

    if (isCI != null && isCI.toBoolean()) {
        return "dummy";
    }

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        throw new GradleException('Please add a secrets.properties file with a value for "' + key
                + '" to perform this action.')
    }

    if (!result.containsKey(key)) {
        throw new GradleException('Please include a value for "' + key +
                '" in your secrets.properties file to perform this action.')
    }

    return result[key]
}

static def shouldSign() {
    def Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        return false
    }

    return result.containsKey("RELEASE_STORE_FILE") &&
            result.containsKey("RELEASE_STORE_PASSWORD") &&
            result.containsKey("RELEASE_KEY_ALIAS") &&
            result.containsKey("RELEASE_KEY_PASSWORD")
}
