apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'me.proxer.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.version

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets("RELEASE_STORE_FILE"))
                storePassword getFromSecrets("RELEASE_STORE_PASSWORD")
                keyAlias getFromSecrets("RELEASE_KEY_ALIAS")
                keyPassword getFromSecrets("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "PROXER_API_KEY", "\"${getFromSecrets("PROXER_API_KEY")}\""
        }

        debug {
            minifyEnabled true
            useProguard false
            proguardFiles 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'

            if (shouldSign()) {
                signingConfig signingConfigs.release
            } else {
                logger.warn('This build will not be signed because it is missing the keystore info. Please add ' +
                        'values for "RELEASE_STORE_FILE", "RELEASE_STORE_PASSWORD", "RELEASE_KEY_ALIAS" and ' +
                        '"RELEASE_KEY_PASSWORD" to your secrets.properties file if you want the apk to be signed.')
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile deps.kotlinStdlib
    compile deps.anko
    compile deps.ankoSqlite
    compile deps.supportAppCompat
    compile deps.supportV13
    compile deps.supportRecyclerView
    compile deps.supportCardView
    compile deps.supportDesign
    compile deps.supportAnimatedVectorDrawable
    compile deps.supportCustomtabs
    compile deps.supportPreference
    compile deps.supportPreferenceFix
    compile deps.supportPreferenceFixSpinner
    compile deps.eventBus
    compile deps.proxerLib
    compile deps.ktask
    compile deps.ktaskAndroid
    kapt deps.eventBusAnnotation

    compile(deps.aboutLibraries) { transitive = true }
    compile(deps.materialDrawer) { transitive = true }
    compile deps.iconics
    compile deps.communityMaterialTypeface
    compile deps.crossfader
    compile deps.materialAbout
    compile deps.subsamplingScaleImageView
    compile deps.circleImageView
    compile deps.tabLayoutHelper
    compile deps.materialDialogs
    compile deps.flexbox
    compile deps.badge
    compile deps.emojiIos
    compile deps.exomedia
    compile deps.exoplayerIntegration
    compile deps.materialProgressBar
    compile deps.materialRatingBar
    compile deps.customtabsHelper
    compile deps.introduction

    compile deps.threeten
    compile(deps.hawk) { exclude module: 'gson' }
    compile deps.glide
    compile deps.glideIntegration
    compile deps.linkBuilder
    compile deps.easyHeaderFooterAdapter

    debugCompile deps.leakCanary
    releaseCompile deps.leakCanaryNoOp
}

kapt {
    arguments {
        arg('eventBusIndex', 'me.proxer.app.EventBusIndex')
    }
}

static getFromSecrets(String key) {
    Properties result = new Properties()
    Object isCI = System.getenv('CI')

    if (isCI != null && isCI.toBoolean()) {
        return "dummy"
    }

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        throw new GradleException('Please add a secrets.properties file with a value for "' + key +
                '" to perform this action.')
    }

    if (!result.containsKey(key)) {
        throw new GradleException('Please include a value for "' + key +
                '" in your secrets.properties file to perform this action.')
    }

    return result[key]
}

static shouldSign() {
    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File('secrets.properties')))
    } catch (Exception ignored) {
        return false
    }

    return result.containsKey("RELEASE_STORE_FILE") && result.containsKey("RELEASE_STORE_PASSWORD") &&
            result.containsKey("RELEASE_KEY_ALIAS") && result.containsKey("RELEASE_KEY_PASSWORD")
}
